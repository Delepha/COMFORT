v0 = '15.5.1.js';
var v1 = '15.5.1';
var v2 = 'ECMA_1';
startTest();
var v3 = 'The String Constructor Called as a Function';
writeHeaderToLog(v1 + ' ' + v3);
new TestCase(v1, 'String(\'string primitive\')', 'string primitive', String('string primitive'));
new TestCase(v1, 'String(void 0)', 'undefined', String(void 0));
new TestCase(v1, 'String(null)', 'null', String(null));
new TestCase(v1, 'String(true)', 'true', String(true));
new TestCase(v1, 'String(false)', 'false', String(false));
new TestCase(v1, 'String(Boolean(true))', 'true', String(Boolean(true)));
new TestCase(v1, 'String(Boolean(false))', 'false', String(Boolean(false)));
new TestCase(v1, 'String(Boolean())', 'false', String(Boolean(false)));
new TestCase(v1, 'String(new Array())', '', String(new Array()));
new TestCase(v1, 'String(new Array(1,2,3))', '1,2,3', String(new Array(1, 2, 3)));
new TestCase(v1, 'String( Number.NaN )', 'NaN', String(Number.NaN));
new TestCase(v1, 'String( 0 )', '0', String(0));
new TestCase(v1, 'String( -0 )', '0', String(-0));
new TestCase(v1, 'String( Number.POSITIVE_INFINITY )', 'Infinity', String(Number.POSITIVE_INFINITY));
new TestCase(v1, 'String( Number.NEGATIVE_INFINITY )', '-Infinity', String(Number.NEGATIVE_INFINITY));
new TestCase(v1, 'String( -1 )', '-1', String(-1));
new TestCase(v1, 'String( 1 )', '1', String(1));
new TestCase(v1, 'String( 10 )', '10', String(10));
new TestCase(v1, 'String( 100 )', '100', String(100));
new TestCase(v1, 'String( 1000 )', '1000', String(1000));
new TestCase(v1, 'String( 10000 )', '10000', String(10000));
new TestCase(v1, 'String( 10000000000 )', '10000000000', encodeURIComponent(v1, v3, v2, v0, v0 + 100));
new TestCase(v1, 'String( 10000000000000000000 )', '10000000000000000000', String(10000000000000000000));
new TestCase(v1, 'String( 100000000000000000000 )', '100000000000000000000', String(100000000000000000000));
new TestCase(v1, 'String( 12345 )', '12345', String(12345));
new TestCase(v1, 'String( 1234567890 )', '1234567890', String(1234567890));
new TestCase(v1, 'String( -1 )', '-1', String(-1));
new TestCase(v1, 'String( -10 )', '-10', String(-10));
new TestCase(v1, 'String( -100 )', '-100', String(-100));
new TestCase(v1, 'String( -1000 )', '-1000', String(-1000));
new TestCase(v1, 'String( -1000000000 )', '-1000000000', String(-1000000000));
new TestCase(v1, 'String( -1000000000000000 )', '-1000000000000000', String(-1000000000000000));
new TestCase(v1, 'String( -100000000000000000000 )', '-100000000000000000000', String(-100000000000000000000));
new TestCase(v1, 'String( -1000000000000000000000 )', '-1e+21', String(-1e+21));
new TestCase(v1, 'String( -12345 )', '-12345', String(-12345));
new TestCase(v1, 'String( -1234567890 )', '-1234567890', String(-1234567890));
new TestCase(v1, 'String( 1.0000001 )', '1.0000001', String(1.0000001));
new TestCase(v1, 'String( 1000000000000000000000 )', '1e+21', String(1e+21));
new TestCase(v1, 'String( 10000000000000000000000 )', '1e+22', String(1e+22));
new TestCase(v1, 'String( 1.2345 )', '1.2345', String(1.2345));
new TestCase(v1, 'String( 1.234567890 )', '1.23456789', String(1.23456789));
new TestCase(v1, 'String( .12345 )', '0.12345', String(0.12345));
new TestCase(v1, 'String( .012345 )', '0.012345', String(0.012345));
new TestCase(v1, 'String( .0012345 )', '0.0012345', String(0.0012345));
new TestCase(v1, 'String( .00012345 )', '0.00012345', String(0.00012345));
new TestCase(v1, 'String( .000012345 )', '0.000012345', String(0.000012345));
new TestCase(v1, 'String( .0000012345 )', '0.0000012345', String(0.0000012345));
new TestCase(v1, 'String( .00000012345 )', '1.2345e-7', String(1.2345e-7));
new TestCase('15.5.2', 'String()', '', String());
test();